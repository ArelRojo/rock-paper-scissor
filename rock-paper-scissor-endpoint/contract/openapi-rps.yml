openapi: 3.0.2
info:
  title: Rock, Paper, Scissors
  description: "Tutorials on Spring Boot and Java, thoughts about the Software Craft, and relevant book reviews. Because it's just as important to understand the Why as it is to understand the How. Have fun!"
  termsOfService: http://swagger.io/terms/
  contact:
    email: lisasaliasi@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
externalDocs:
  description: Find out more about Reflectoring
  url: https://reflectoring.io/about/
servers:
  - url: http://localhost:8080/rps/v1
tags:
  - name: rps
    description: Operations about rock, paper, scissor
  - name: match
    description: Operations about matches
  - name: movement
    description: Operations about movements
paths:
  /match:
    get:
      tags:
        - match
      description: Get all matches
      operationId: getMatches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchesDTO'
    post:
      tags:
        - match
      description: Create a match
      operationId: createMatch
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MatchDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDTO'
  /match/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - match
      description: Get match
      operationId: getMatch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDTO'
  /match/metrics:
    get:
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
      tags:
        - match
      description: Get metrics for human or machine
      operationId: getMetrics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDTO'
  /movement:
    get:
      parameters:
        - in: query
          name: idMatch
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - movement
      description: Get all movements
      operationId: getMovementsByMatch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovementsDTO'
    post:
      tags:
        - movement
      description: Create a movement
      operationId: createMovement
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MovementDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovementDTO'

components:
  schemas:
    MatchDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        winner:
          type: string
        movements:
          type: integer
    MatchesDTO:
      type: array
      items:
        $ref: '#/components/schemas/MatchDTO'
    MovementDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        idMatch:
          type: integer
          format: int64
        moveOrder:
          type: integer
        robotType:
          $ref: '#/components/schemas/RPSMove'
        humanType:
          $ref: '#/components/schemas/RPSMove'
        isFinal:
          type: boolean
    MovementsDTO:
      type: array
      items:
        $ref: '#/components/schemas/MovementDTO'
    MetricsDTO:
      type: object
      properties:
        wins:
          type: double
        rock:
          type: double
        paper:
          type: double
        scissor:
          type: double
    MetricsDTOArray:
      type: array
      items:
        $ref: '#/components/schemas/MetricsDTO'
    RPSMove:
      type: string
      enum:
        - ROCK
        - PAPER
        - SCISSOR